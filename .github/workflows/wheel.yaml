name: wheel
on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  launchers:
    name: launcher
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: Build
      shell: bash
      run: |
        set -ex
        ls -la launcher
        git clone https://github.com/pypa/distlib.git

        cp distlib/PC/launcher.c launcher/

        cd launcher
        patch -Np1 -i rez.patch --binary

        mkdir build
        cd build

        cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release
        VERBOSE=1 cmake --build .

        mv simple_launcher_cli.exe t64.exe
        mv simple_launcher_gui.exe w64.exe

    - uses: actions/upload-artifact@v3
      with:
        name: launchers
        path: 'launcher/build/*.exe'

  wheel:
    name: Build wheel
    needs: ["launchers"]

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v3
      if: ${{ matrix.os == 'windows-latest' }}
      with:
        name: launchers
        path: launcher

    - uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Build wheel
      shell: bash
      run: |
        set -ex
        python -m pip install build
        python -m build -w . --outdir ./dist

    - uses: actions/upload-artifact@v3
      with:
        path: dist
        name: wheels

  test:
    name: Test wheels
    needs: ["wheel"]

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    env:
      CURRENT_PLATFORM: ${{ matrix.os }}

    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - uses: actions/download-artifact@v3
      with:
        name: wheels
        path: wheels

    - name: Install wheel
      shell: bash
      run: |
        set -ex
        python -m venv .venv
        if [[ "${CURRENT_PLATFORM}" == "windows-latest" ]]; then
            .venv/Scripts/python.exe -m pip install rez --find-links ./wheels --no-index
            ls -la .venv/Scripts/
            ls -la .venv/Scripts/rez
        else
            .venv/bin/python -m pip install rez --find-links ./wheels --no-index
            ls -la .venv/bin/
            ls -la .venv/bin/rez
        fi

    - name: Test commands
      shell: bash
      run: |
        set -ex
        if [[ "${CURRENT_PLATFORM}" == "windows-latest" ]]; then
            export PATH=$(pwd)/.venv/Scripts/rez:$PATH
        else
            export PATH=$(pwd)/.venv/bin/rez:$PATH
        fi

        echo 'Running jctest with REZ_LAUNCHER_DEBUG=1'
        export REZ_LAUNCHER_DEBUG=1

        jctest

        rez --help
        rez --version
        rez-env --help
