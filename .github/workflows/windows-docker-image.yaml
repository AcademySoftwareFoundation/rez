#
# Create base docker image and python version specific images for windows.
# Currently uses hub.docker.com as registry.
#
# Requires a DOCKERHUB_TOKEN secret and username/repository to match the github
# repository. For example: nerdvegas/rez -> User/Repository: nerdvegas
#
# Commit to windows-docker-image.yaml or .github/docker/** separately
# to trigger a image build. This Image will be used in consecutive commits.
#
# TODO:
# - Better way to pass the variables throughout steps
# - The reason for using docker is that the github supplied containers have
#   a bloated PATH environment variable that can not be changed:
#   https://github.community/t5/GitHub-Actions/Windows-image-bloat-in-PATH-disables-cmd-prompt-usage/m-p/36004#M2414
# - Github offers its own package registry. Pushing to is broken in the BETA
#   https://github.community/t5/GitHub-Actions/Docker-Push-to-Package-Registry-from-Windows/m-p/36393#M2560

name: windows-docker-image

on:
  push:
    # We only generate new images on master, because the 'windows' workflow uses
    # latest image, and we don't want it to use latest from a different branch.
    # We could get around this by qualifying the image name with user and branch,
    # however that would create a new image on each new branch, and windows image
    # builds are _very slow_ on github runners.
    #
    # It would be ideal to avoid use of latest tag in 'windows' workflow, however
    # that doesn't work. If we use the commit hash tag (see ${last_docker_py_rev}
    # below), this causes the windows workflow to fail if the image also needs to
    # be updated, since _this_ workflow hasn't had a chance to build it yet. We
    # can't use workflow dependencies either (see 'workflow_run' github actions
    # event) because that causes a workflow to run _only when_ another workflow
    # has completed - however we only want to rebuild the image when required,
    # not every time the windows workflow runs. Github needs to add a way to
    # "run workflow B _after_ workflow A, _if_ A was triggered, otherwise run B
    # regardless."
    #
    branches:
      - master
    paths:
      - '.github/docker/rez-win-base/**'
      - '.github/docker/rez-win-py/**'
      - '.github/workflows/windows-docker-image.yaml'

jobs:

  # ----------------------------------------------------------------------------
  # Create base image if necessary
  #
  # State depends on .github\docker\rez-win-base\** and this file
  base:
    runs-on: windows-2019

    steps:
      - name: Login to docker repository
        run: |
          ${gh_user} = ("${{ github.repository }}" -Split '/')[0]
          '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u ${gh_user} --password-stdin

      # TODO: Represent the conditional build as steps?
      # https://github.community/t5/GitHub-Actions/Fallback-via-if-failure-without-failing-the-job/m-p/36596#M2636
      #
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build base docker image if needed
        id: build_image
        run: |
          ${last_docker_base_rev} = $( `
            git log -n 1 --author-date-order --pretty=format:%H -- `
            .\.github\docker\rez-win-base\ `
            .\.github\workflows\windows-docker-image.yaml `
          ).SubString(0, 8)

          ${gh_user} = ("${{ github.repository }}" -Split '/')[0]
          ${docker_image} = "${gh_user}/rez-win-base:${last_docker_base_rev}"

          Write-Output "Pulling DockerHub image ${docker_image}..."
          $ErrorActionPreference = "Continue"
          docker pull ${docker_image} 2>$null || Write-Output "(no such image)"
          $ErrorActionPreference = "Stop"

          if ($LastExitCode -ne 0) {
            cd .github\docker\rez-win-base

            Write-Output "Building DockerHub image ${docker_image}..."
            docker build --tag ${docker_image} .

            Write-Output "Pushing DockerHub image ${docker_image}..."
            docker push ${docker_image}

            # store inspection as artifact for ease of debugging
            docker inspect ${docker_image} > inspect.json
            Write-Output "::set-output name=base_rev::${last_docker_base_rev}"
          }

      - id: inspect_json
        uses: andstor/file-existence-action@v1
        with:
          files: .github\docker\rez-win-base\inspect.json

      - uses: actions/upload-artifact@v2
        with:
          name: "rez-win-base-${{ steps.build_image.outputs.base_rev }}.json"
          path: .github\docker\rez-win-base\inspect.json
        if: steps.inspect_json.outputs.files_exists == 'true'

  # ----------------------------------------------------------------------------
  # Create python images off base image
  # Each image will have a single python version installed as defined in the
  # strategy-matrix.
  #
  python:
    runs-on: windows-2019
    needs: base

    strategy:
      matrix:
        python-version:
          - '2.7.17'
          - '3.7.5'
      fail-fast: false

    steps:
      - name: Login to docker repository
        run: |
          ${gh_user} = ("${{ github.repository }}" -Split '/')[0]
          '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u ${gh_user} --password-stdin

      - name: Checkout
        uses: actions/checkout@v2

      - name: Pull base docker image
        run: |
          ${last_docker_base_rev} = $( `
            git log -n 1 --author-date-order --pretty=format:%H -- `
            .\.github\docker\rez-win-base\ `
            .\.github\workflows\windows-docker-image.yaml `
          ).SubString(0, 8)

          ${gh_user} = ("${{ github.repository }}" -Split '/')[0]
          ${docker_image} = "${gh_user}/rez-win-base:${last_docker_base_rev}"

          Write-Output "Pulling DockerHub image ${docker_image}..."
          docker pull ${docker_image}

          # so rez-win-py/Dockerfile can reference base image
          docker tag ${docker_image} rez-win-base:${last_docker_base_rev}

      - name: Build py Docker image if needed
        id: build_image
        run: |
          ${last_docker_base_rev} = $( `
            git log -n 1 --author-date-order --pretty=format:%H -- `
            .\.github\docker\rez-win-base\ `
            .\.github\workflows\windows-docker-image.yaml `
          ).SubString(0, 8)

          ${last_docker_py_rev} = $( `
            git log -n 1 --author-date-order --pretty=format:%H -- `
            .\.github\docker\rez-win-py\ `
            .\.github\docker\rez-win-base\ `
            .\.github\workflows\windows-docker-image.yaml `
          ).SubString(0, 8)

          ${gh_user} = ("${{ github.repository }}" -Split '/')[0]
          ${docker_image_notag} = "${gh_user}/rez-win-py-${{ matrix.python-version }}"
          ${docker_image} = "${docker_image_notag}:${last_docker_py_rev}"

          Write-Output "Pulling DockerHub image ${docker_image}..."
          $ErrorActionPreference = "Continue"
          docker pull ${docker_image} 2>$null || Write-Output "(no such image)"
          $ErrorActionPreference = "Stop"

          if ($LastExitCode -ne 0) {
            cd .github\docker\rez-win-py

            Write-Output "Building DockerHub image ${docker_image} from rez-win-base:${last_docker_base_rev}..."
            docker build `
              --tag ${docker_image} `
              --build-arg PYTHON_VERSION="${{ matrix.python-version }}" `
              --build-arg BASE_TAG="${last_docker_base_rev}" `
              --build-arg PY_TAG="${last_docker_py_rev}" `
              .

            Write-Output "Pushing DockerHub image ${docker_image}..."
            docker push ${docker_image}

            Write-Output "Tagging and pushing ${docker_image_notag}:latest..."
            docker tag ${docker_image} ${docker_image_notag}:latest
            docker push ${docker_image_notag}:latest

            # store inspection as artifact for ease of debugging
            docker inspect ${docker_image} > inspect.json
            Write-Output "::set-output name=py_rev::${last_docker_py_rev}"
          }

      - id: inspect_json
        uses: andstor/file-existence-action@v1
        with:
          files: .github\docker\rez-win-py\inspect.json

      - uses: actions/upload-artifact@v2
        with:
          name: "rez-win-py-${{ matrix.python-version }}-${{ steps.build_image.outputs.py_rev }}.json"
          path: .github\docker\rez-win-py\inspect.json
        if: steps.inspect_json.outputs.files_exists == 'true'
