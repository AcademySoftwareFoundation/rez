diff --git a/launcher.c b/launcher.c
index 727f7916..a1a8768c 100644
--- a/launcher.c
+++ b/launcher.c
@@ -35,8 +35,6 @@
 
 #pragma comment (lib, "Shlwapi.lib")
 
-#define APPENDED_ARCHIVE
-#define USE_ENVIRONMENT
 #define SUPPORT_RELATIVE_PATH
 
 #define MSGSIZE 1024
@@ -822,6 +820,13 @@ run_child(wchar_t * cmdline)
 #endif
         si.dwFlags |= STARTF_USESTDHANDLES;
     }
+
+    size_t rez_envvar_size = 0;
+    getenv_s(&rez_envvar_size, NULL, 0, "REZ_LAUNCHER_DEBUG");
+    if (rez_envvar_size > 0) {
+        printf("Launching: %ls\n", cmdline);
+    }
+
     ok = CreateProcessW(NULL, cmdline, NULL, NULL, TRUE, 0, NULL, NULL, &si, &child_process_info);
     if (!ok) {
         // Failed to create process. See if we can find out why.
@@ -1027,11 +1032,12 @@ process(int argc, char * argv[])
         wcp = pbuffer;
     }
 #endif
-     /* 3 spaces + 4 quotes + NUL */
-    len = wcslen(wcp) + wcslen(wp) + 8 + wcslen(psp) + wcslen(cmdline);
+     /* 4 spaces + 4 quotes + -E + NUL */
+    len = wcslen(wcp) + wcslen(wp) + 11 + wcslen(psp) + wcslen(cmdline);
     cmdp = (wchar_t *) calloc(len, sizeof(wchar_t));
     assert(cmdp != NULL, "Expected to be able to allocate command line memory");
-    _snwprintf_s(cmdp, len, len, L"\"%ls\" %ls \"%ls\" %ls", wcp, wp, psp, cmdline);
+    // Note that we inject -E to make sure PYTHON* variables are not picked up.
+    _snwprintf_s(cmdp, len, len, L"\"%ls\" -E %ls \"%ls\" %ls", wcp, wp, psp, cmdline);
     run_child(cmdp);  /* never actually returns */
     free(cmdp);
     return 0;
