#!/bin/bash
#
# TODO Deprecate once removed from rez-run.
#
# Disclaimer:
# This source has been adapted from:
# http://code.google.com/p/optparse-bash
#
# This is some bash script which allows you to parse an argument list, and print out a usage
# message, which is similar to python's 'optparse' module. The following example illustrates
# its use:
#
# ----------------------8<------------------------
#!/bin/bash
# source optparse
#
# optparse_add_option 	mode 	-m latest 'Set the mode [default = %s].'
# optparse_add_flag 		quiet 	-q False 'Quiet mode [default = %s].'
# optparse_add_flag 		fast 	-f False 'Go fast [default = %s].'
# optparse_set_usage "foo [options] arg1 arg2 argN"
# optparse_parseargs $*
#
# echo "mode is:" $MODE
# echo "quiet is:" $QUIET
# shift $parseargs_ntokens
# echo "extra args are:" $*
# ----------------------8<------------------------
#
# Examples of how you could invoke this script are:
#
# > optparse_eg -q -m latest fee foo fi
# > optparse_eg --mode latest
# > optparse_eg --mode=latest
# > optparse_eq -q -f
# > optparse_eq -qf
# > optparse_eq -mlatest
#


# DIRECTIONS:

############### FLAG AND OPTION PARSING ###############


# optparse_add_flag <flag.name> <flag.short> <Default = True or False> <Description>

#type:
#optparse_add_option <option.name> <option.short> <Default Value> <Description>  (Default Default is None) (Default short is none)

# <option.name>
# option.name is also the --long_type
# A variable in caps OPTION.NAME will be created for each option

# <option.short>
# Required to be a single letter or 'None'

# Flag are either True or False; The input of a flag changes it from its default value
# Optn requires an option after the flag

#Default Types are not restricted

# Description is for the help menu

# Example Add an flag:   optparse_add_flag verbose -v False 'This flag turns on verbose mode'
# Example Add an option: optparse_add_option length -l 10 'Choose a length'

# A command line of:./my_prog -l 20 --verbose
# would create the variables:
# VERBOSE=True
# LENGTH=20


############### ADDITIONAL OPTIONS (HELP MENU ) ################

# optparse_add_info allows a help string to be printed out at the help prompt
# optparse_add_example will also allow and example to be printed out at help prompt.
# optparse_set_prefix will define a prefix to prepend to environment variables created for flags/options by optparse.



#################################################################################3

function optparse_add_info
{
	if [ $# -ge 2 ]; then echo 'ERROR: optparse_add_info acts on a single text string'; exit; fi
	HELP_INFO=$1;
}


function optparse_add_example
{
	if [ $# -ge 2 ]; then echo 'ERROR: optparse_add_example acts on a single text string'; exit; fi
	HELP_EXAMPLE=$1
}

function optparse_set_prefix
{
	if [ $# -ge 2 ]; then echo 'ERROR: optparse_set_prefix actions on a single text string'; exit; fi
	OPTPARSE_PREFIX=$1
}

# add flag is NAME, short, default
function optparse_add_flag
{
	if [ $# == 0 ]; then echo 'ERROR: optparse_add_flag requires at least one argument'; exit; fi
	if [ $# == 1 ]; then
		local SHRT='None'
		local DEF='False'
	fi

	if [ -z $FLAGS_ADDED ];
		then
		FLAGS_ADDED=0
	else
		FLAGS_ADDED=`expr $FLAGS_ADDED + 1`
	fi

	if [ $# == 2 ]; then
		if [ $2 == 'True' ] || [ $2 == 'False' ]; then
			local SHRT='None'
			local DEF=$2
		else
			if [ $(echo $2 | sed 's/\(.\).*/\1/g') == '-' ] && [ ${#2} == 2 ]; then
				local SHRT=$(echo $2 | sed 's/.\(.\).*/\1/g')
				local DEF='False'
			else
				echo 'ERROR: Wrong Flag Input '"$2"
				exit
			fi
		fi
	fi
	if [ $# -ge 3 ]; then
		if [ $(echo $2 | sed 's/\(.\).*/\1/g') == '-' ] && [ ${#2} == 2 ]; then
			local SHRT=$(echo $2 | sed 's/.\(.\).*/\1/g')
		else
			echo 'Error: Incorrect Short Form Input: '"$2"
			exit
		fi
		if [ $3 == 'True' ] || [ $3 == 'False' ]; then
			local DEF=$3
		else
			echo 'Error: Flag default can only be True or False '"$3"
			exit
		fi
	fi
	FLAG_DEF[$FLAGS_ADDED]=$DEF
	FLAG_NAMES[$FLAGS_ADDED]=$(echo $1 | sed -e 's/\(.*\)/\U\1/')
	if [ $SHRT == 'None' ]; then
		FLAG_SHORT[$FLAGS_ADDED]=
	else
		FLAG_SHORT[$FLAGS_ADDED]='-'$SHRT
	fi
	FLAG_LONG[$FLAGS_ADDED]='--'$1

	hput "$(echo ${OPTPARSE_PREFIX}__$1 | sed -e 's/\(.*\)/\U\1/')" short $SHRT TYPE Flag DEFAULT $DEF
	eval $(echo ${OPTPARSE_PREFIX}$1 | sed -e 's/\(.*\)/\U\1/')=$DEF

	if [ $# == 4 ]; then
		FLAG_DES[$FLAGS_ADDED]=$4
	else
		FLAG_DES[$FLAGS_ADDED]='None'
	fi
	if [ $# -ge 5 ]; then
		echo 'Error: optparse_add_flag takes at most 4 paramters'
		exit
	fi
}


# add option is NAME, short, default
function optparse_add_option
{
	if [ $# == 0 ]; then echo 'ERROR: optparse_add_option requires at least one argument'; exit; fi
	if [ $# == 1 ]; then
		local SHRT='None'
		local DEF='None'
	fi
	
	if [ -z $OPTS_ADDED ];
		then
		OPTS_ADDED=0
	else
		OPTS_ADDED=`expr $OPTS_ADDED + 1`
	fi
	
	if [ $# == 2 ]; then
		if [ $(echo $2 | sed 's/\(.\).*/\1/g') == '-' ] && [ ${#2} == 2 ]; then
			local DEF='None'
			local SHRT=$(echo $2 | sed 's/.\(.\).*/\1/g')
		else
			local SHRT='None'
			local DEF=$2
		fi
	fi

	if [ $# -ge 3 ]; then
		if [ $(echo $2 | sed 's/\(.\).*/\1/g') == '-' ] && [ ${#2} == 2 ]; then
			local SHRT=$(echo $2 | sed 's/.\(.\).*/\1/g')
		else
			echo 'Error: Incorrect Short Form Input: '"$2"
			exit
		fi
		local DEF=$3
	fi
	OPT_DEF[$OPTS_ADDED]=$DEF
	OPT_NAMES[$OPTS_ADDED]=$(echo $1 | sed -e 's/\(.*\)/\U\1/')

	if [ $SHRT == 'None' ]; then
		OPT_SHORT[$OPTS_ADDED]=
	else
		OPT_SHORT[$OPTS_ADDED]='-'$SHRT
	fi
	OPT_LONG[$OPTS_ADDED]='--'$1
	hput "$(echo ${OPTPARSE_PREFIX}__$1 | sed -e 's/\(.*\)/\U\1/')" short $SHRT TYPE Optn DEFAULT $DEF
	eval $(echo ${OPTPARSE_PREFIX}$1 | sed -e 's/\(.*\)/\U\1/')="'"$DEF"'"

	if [ $# == 4 ]; then
		OPT_DES[$OPTS_ADDED]=$4
	else
		OPT_DES[$OPTS_ADDED]='None'
	fi
	if [ $# -ge 5 ]; then
		echo 'Error: optparse_add_option takes at most 4 paramters'
		exit
	fi
}


# set custom usage string
function optparse_set_usage
{
	if [ $# == 0 ]; then echo 'ERROR: optparse_set_usage requires at least one argument'; exit; fi
	CUSTOM_USAGE="$*"
}


function optparse_usage
{
	if [ "$CUSTOM_USAGE" == "" ]; then
		if [ -z != $(echo $HELP_INFO | sed 's/\(.\).*/\1/g') ]; then echo $HELP_INFO ; echo '';fi
		if [ -z != $(echo $HELP_EXAMPLE | sed 's/\(.\).*/\1/g') ]; then echo $HELP_EXAMPLE ; echo ''; fi

		if [ -z != $OPTS_ADDED ] && [ -z != $FLAGS_ADDED ]; then
			echo 'Usage: '"$0"' [-options ]  [--flags]'
		fi
		if [ -z != $OPTS_ADDED ] && [ -z $FLAGS_ADDED ]; then
			echo 'Usage: '"$0"' [-options ]'
		fi
		if [ -z $OPTS_ADDED ] && [ -z != $FLAGS_ADDED ]; then
			echo 'Usage: '"$0"' [--flags]'
		fi

		if [ -z $OPTS_ADDED ] && [ -z $FLAGS_ADDED ]; then
			echo 'Usage: '"$0"
		fi
	else
		echo "Usage:" $CUSTOM_USAGE
	fi

	echo

	txt=
	j=0
	if [ -z != $OPTS_ADDED ]; then
		echo 'Options:'
		until [ $j -gt $OPTS_ADDED ]
		do
			txt=$txt''${OPT_SHORT[$j]}' '${OPT_NAMES[$j]}', '${OPT_LONG[$j]}=${OPT_NAMES[$j]}
			descr=`echo ${OPT_DES[$j]} | sed 's/%default/'${OPT_DEF[$j]}'/'`
			txt=$txt' @@@ '$descr'`'
			j=`expr $j + 1`
		done
	fi

	j=0
	if [ -z != $FLAGS_ADDED ]; then
		until [ $j -gt $FLAGS_ADDED ]
		do
			txt=$txt''${FLAG_SHORT[$j]}', '${FLAG_LONG[$j]}
			descr=`echo ${FLAG_DES[$j]} | sed 's/%default/'${FLAG_DEF[$j]}'/'`
			txt=$txt' @@@ '$descr'`'
			j=`expr $j + 1`
		done
	fi

	echo $txt | tr '`' '\n' | column -c 2 -t -s @@@ | awk '{print "  "$F}'
	exit
}


hput()
{
    eval "$1"='$1...$3...$5...$7'
    eval "$3"='$1'
    eval "$1""$2"='$3'
    eval "$1""$4"='$5'
    eval "$1""$6"='$7'
}


hget()
{
    eval echo '${'"$1"'#hash}'
}


#
# Parse the arguments (pass $* to this function).
# Output:
# num_parsed_tokens: The number of tokens parsed. You should 'shift' by this number after
# calling parseargs, in order to do your own processing on extra trailing arguments.
#
function optparse_parseargs
{
	parseargs_ntokens=0

	if [ $# == 0 ]; then
		optparse_usage
		exit
		fi

	if [ $1 == '--help' ] || [ $1 == '-h' ]; then optparse_usage; fi

	# Build the environment variable prefix string, which we need to use througout
	PRE=$(echo ${OPTPARSE_PREFIX} | sed -e 's/\(.*\)/\U\1/')

	until [ -z "$1" ] && [ -z "$ARG" ]  # Until all parameters used up...
	do
		if [ "$ARG" != "" ]; then

			#################################
			# consume arg
			#################################

			VAR=$(echo $CURRENT_OPTION | sed 's/\('$PRE'\)__\(.*\)/\1\2/g')
			if [ $(echo $ARG | sed 's/\(.\).*/\1/g') == '-' ];
				then
				echo 'ERROR: An argument is required for this option: '"$VAR" | sed 's/'$PRE'//g'
				echo ''
				optparse_usage
				exit
			else
				eval $VAR="'""$ARG""'"
				CURRENT_OPTION=
				ARG=
				continue
			fi
		else
			if [ $(echo $1 | sed 's/\(.\).*/\1/g') != '-' ];
				then
				# we've hit trailing args, bail
				return
			else
				if [ $(echo $1 | sed 's/.\(.\).*/\1/g') == '-' ]; then

					#################################
					# long option
					#################################

					if [ -z $(echo $1 | sed -n '/\(--[^ ]\+\)=/p') ]; then
						# '--opt arg'
						CURRENT_OPTION=$(echo ${OPTPARSE_PREFIX}$1 | sed 's/--/__/' | sed -e 's/\(.*\)/\U\1/')
					else
						# '--opt=arg'
						CURRENT_OPTION=$(echo ${OPTPARSE_PREFIX}$1 | sed 's/--/__/' | sed -e 's/=.*//' | sed -e 's/\(.*\)/\U\1/')
						ARG=$(echo $1 | sed 's/[^=]*=//')
					fi

					if [ -z $(echo `hget "$CURRENT_OPTION"`) ]; then
						echo 'ERROR: The long form option: '"$1"' is undeclared';
						echo ''
						optparse_usage
						exit
					fi
				else

					#################################
					# short option
					#################################

					if [ "`echo $1 | sed -n '/-../p'`" == "" ]; then
						# '-a'
						CURRENT_OPTION=$(echo `hget $(echo $1 | sed 's/.\(.*\)/\1/g')`)
						if [ -z "$CURRENT_OPTION" ]; then
							echo 'ERROR: The short form option: '"$1"' is undeclared'
							echo ''
							optparse_usage
							exit
						fi
					else
						# '-abc' or '-aVALUE'
						opt=`echo $1 | head -c 2`
						CURRENT_OPTION=$(echo `hget $(echo $opt | sed 's/.\(.*\)/\1/g')`)
						if [ -z "$CURRENT_OPTION" ]; then
							echo 'ERROR: The short form option: '"$opt"' is undeclared'
							echo ''
							optparse_usage
							exit
						fi

						if [ $(echo `hget "$CURRENT_OPTION""TYPE"`) == Flag ]; then
							# '-abc'
							EXTRA_FLAGS=`echo $1 | sed 's/^-.//'`
							while [ "$EXTRA_FLAGS" != "" ]; do
								flag=`echo $EXTRA_FLAGS | head -c 1`
								EXTRA_FLAGS=`echo $EXTRA_FLAGS | sed 's/^.//'`

								# check it's a valid flag
								CURRENT_FLAG=$(echo `hget $flag`)
								if [ -z "$CURRENT_FLAG" ]; then
									echo 'ERROR: The flag: '"$flag"' is undeclared'
									echo ''
									optparse_usage
									exit
								fi

								# set the flag
								FVAR=$(echo $CURRENT_FLAG | sed 's/\('$PRE'\)__\(.*\)/\1\2/g')
								if [ $(echo `hget "$CURRENT_FLAG""DEFAULT"`) == True ]; then eval $FVAR=False; fi
								if [ $(echo `hget "$CURRENT_FLAG""DEFAULT"`) == False ]; then eval $FVAR=True; fi
							done
						else
							# '-aVALUE'
							ARG=`echo $1 | sed 's/^-.//'`
						fi
					fi
				fi

				if [ $(echo `hget "$CURRENT_OPTION""TYPE"`) == Flag ]; then
					if [ -z != $ARG ]; then
						echo 'ERROR: Supplied an argument to a boolean flag:' $1
						echo ''
						optparse_usage
						exit
					fi

					VAR=$(echo $CURRENT_OPTION | sed 's/\('$PRE'\)__\(.*\)/\1\2/g')
					if [ $(echo `hget "$CURRENT_OPTION""DEFAULT"`) == True ]; then eval $VAR=False; fi
					if [ $(echo `hget "$CURRENT_OPTION""DEFAULT"`) == False ]; then eval $VAR=True; fi
					CURRENT_OPTION=
				else
					if [ "$ARG" == "" ]; then
						shift
						ARG=$1
						parseargs_ntokens=`expr $parseargs_ntokens + 1`
					fi
				fi
			fi

			shift # consume opt
			parseargs_ntokens=`expr $parseargs_ntokens + 1`
		fi
	done

	if [ -z != $CURRENT_OPTION ];
		then
		VAR=$(echo $CURRENT_OPTION | sed 's/\('$PRE'\)__\(.*\)/\1\2/g')
		echo 'ERROR: An argument is required for this option: '"$VAR" | sed 's/'$PRE'//g'
		optparse_usage
		exit
	fi
}










#    Copyright 2008-2012 Dr D Studios Pty Limited (ACN 127 184 954) (Dr. D Studios)
#
#    This file is part of Rez.
#
#    Rez is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Rez is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with Rez.  If not, see <http://www.gnu.org/licenses/>.
