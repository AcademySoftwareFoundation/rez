#!/bin/bash

#
## rez-build
##
## Usage:
## rez-build [-h] [-v <variant_num>] [-m earliest|latest(default)] -- [rez-cmake args] -- [make/equivalent args]
##
## A tool for configuring and running cmake for the project in the current directory, and possibly make (or equivalent).
## A 'package.yaml' file must exist in the current directory, and this drives the build. This utility is designed so
## that it is possible to either automatically build an entire matrix for a given project, or to perform the build for
## each variant manually. Note that in the following descriptions, 'make' is used to mean either make or equivalent.
## The different usage scenarios are described below.
##
## Common options:
## -h:	Display this help, and exit.
## -m:	Select resolution mode.
## -v:	Build for just one variant (zero-indexed)
## -t:	Ignore packages more recent than the given epoch time.
## -i:	Just print the path that the project would be installed to, and exit.
## -u:	Include blacklisted packages.
## -g:	Include archived packages.
## -d:	Do not assume dependency transitivity.
##
## Usage case 1:
## rez-build [-v <variant_num>] [-m earliest|latest(default)] [-- rez-cmake args]
##
## This will use the package.yaml to spawn the correct shell for each variant, and create a 'build-env.sh' script (named
## 'build-env.0.sh,..., build-env.N.sh for each variant). Invoking one of these scripts will spawn an environment and
## automatically run rez-cmake with the supplied arguments - you can then execute make within this context, and this will
## build the given variant. If zero or one variant exists, then 'build-env.sh' is generated.
##
## Usage case 2:
## rez-build [[-v <variant_num>] [-n]] [-m earliest|latest(default)] -- [rez-cmake args] -- [make args]
##
## This will use the package.yaml to spawn the correct shell for each variant, invoke rez-cmake, and then invoke make (or
## equivalent). Use rez-build in this way to automatically build the whole build matrix. rez-build does a 'make clean'
## before makeing by default, but the '-n' option suppresses this. Use -n in situations where you build a specific variant,
## and then want to install that variant without rebuilding everything again. This option is only available when one
## variant is being built, otherwise we run the risk of installing code that has been built for a different variant.
##
##
## Examples of use:
##
## rez-build [-h]
## Display this help, and exit.
##
## rez-build --
## Generate 'build-env.#.sh' files and invoke rez-cmake for each variant, but do not invoke make.
##
## rez-build -- --
## Builds all variants of the project, spawning the correct shell for each, and invoking make for each.
##
## rez-build -v 0 -- --
## Builds only the first variant of the project, spawning the correct shell, and invoking make.
##
## rez-build -v 0
## Equivalent to 'rez-build -v 0 --'
##
## rez-build -v 0 --
## Generate 'build-env.0.sh' and invoke rez-cmake for the first (zeroeth) variant.
##
## rez-build -v 1 -- --
## rez-build -v 1 -n -- -- install
## Build the second variant only, and then install it, avoiding a rebuild.
#

. _set-rez-env

#-#################################################################################################
# usage/parse args
#-#################################################################################################

usage(){
	/bin/cat $0 | grep '^##' | sed 's/^## //g' | sed 's/^##//g'
	exit 1
}

[[ $# -eq 0 ]] && usage
[[ "$1" == "-h" ]] && usage


# gather rez-build args
MODE=latest
VNUMS=
ARGS1=
NOCLEAN=0
IGNORE_BLACKLISTED_ARG=
IGNORE_ARCHIVED_ARG=
ASSUME_DT_ARG=
SVNURL_METADATA=
CHANGELOG=
PRINT_INSTPATH=0
BUILD_EPOCH=
NOW_EPOCH=`/bin/date +%s`

while [ $# -gt 0 ]; do
	if [ "$1" == "--" ]; then
		shift
		break
	fi
	ARGS1=$ARGS1" "$1
	shift
done

if [ "$ARGS1" != "" ]; then
	while getopts iudgm:v:ns:c:t: OPT $ARGS1 ; do
		case "$OPT" in
			m)	MODE=$OPTARG
				;;
			v)	VNUMS=$OPTARG
				;;
			n)	NOCLEAN=1
				;;
			s)	SVNURL_METADATA=$OPTARG
				;;
            c)      CHANGELOG=$OPTARG
				;;
			t)	BUILD_EPOCH=$OPTARG
				;;
			i)	PRINT_INSTPATH=1
				;;
			u)	USE_BLACKLISTED_ARG='--use-blacklisted'
				;;
			g)	USE_ARCHIVED_ARG='--use-archived'
				;;
			d)	ASSUME_DT_ARG='--no-assume-dt'
				;;
			*)	exit 1
				;;
		esac
	done
fi


# gather rez-cmake args, and check for trailing '--', which means we need to run make also.
ARGS2=
DO_BUILD=0
while [ $# -gt 0 ]; do
	if [ "$1" == "--" ]; then
		DO_BUILD=1
		shift
		break
	fi
	if [ "$1" == "-d" ]; then
		echo "rez-cmake -d option disallowed when using rez-build." >&2
		exit 1
	fi
	ARGS2=$ARGS2" "$1
	shift
done

if [ $DO_BUILD -eq 1 ]; then
	ARGS3=$*
fi

# -n option is disallowed if not building
if [ $DO_BUILD -ne 1 ] && [ $NOCLEAN -eq 1 ]; then
	echo "-n option is only supported when performing a build, eg 'rez-build -n -- --'" >&2
	exit 1
fi

# any packages newer than this time will be ignored. This serves two purposes:
# 1) It stops inconsistent builds due to new packages getting released during a build;
# 2) It gives us the ability to reproduce a build that happened in the past, ie we can make
# it resolve the way that it did, rather than the way it might today
if [ "$BUILD_EPOCH" == "" ]; then
	BUILD_EPOCH=$NOW_EPOCH
fi


#-#################################################################################################
# Extract info from package.yaml
#-#################################################################################################

if [ ! -f ./package.yaml ]; then
	echo "rez-build failed - no package.yaml in current directory." >&2
	exit 1
fi

VER=`_rez_query_package_yaml --print-version`
if [ "$VER" == "" ]; then
	exit 1
fi

PKGNAME=`_rez_query_package_yaml --print-name`
if [ "$PKGNAME" == "" ]; then
	exit 1
fi

REQS=`_rez_query_package_yaml --print-build-requires --print-requires`

if [ "$VNUMS" == "" ]; then
	# get all variants
	C=0
	while [ 1 ]; do
		VARIANT=`_rez_query_package_yaml --quiet --print-variant=$C`
		if [ $? -ne 0 ]; then
			break
		fi
		VNUMS=$VNUMS" "$C
		let C++
	done
else
	VARIANT=`_rez_query_package_yaml --print-variant=$VNUMS`
	if [ $? -ne 0 ]; then
		exit 1
	fi
fi

if [ "$VNUMS" == "" ]; then
	if [ $PRINT_INSTPATH -eq 1 ]; then
		echo $REZ_RELEASE_PACKAGES_PATH"/"$PKGNAME"/"$VER
		exit 0
	fi
	VNUMS=-1
fi


#-#################################################################################################
# Iterate over variants
#-#################################################################################################
VCS=
if [ -d $PWD/.git ]; then
  VCS='git'
elif [ -d $PWD/.svn ]; then
  VCS='svn'
fi

if [ "$VCS" != "" -a "$SVNURL_METADATA" == "" ]; then
  SVNURL_METADATA=`rez-$VCS-print-url`
fi

BUILD_DIR_BASE=$PWD/build
BUILD_DIR_ID=$BUILD_DIR_BASE/.rez-build

for VNUM in $VNUMS
do
	# set variant and create build directories
	VARIANT=

	if [ $VNUM -eq -1 ]; then
		BUILD_DIR=$BUILD_DIR_BASE
		CMAKE_DIR_ARG=../
	else
		BUILD_DIR=$BUILD_DIR_BASE/$VNUM
		CMAKE_DIR_ARG=../../

		VARIANT=`_rez_query_package_yaml --print-variant=$VNUM`
		BUILD_DIR_SYMLINK=$BUILD_DIR_BASE/`echo $VARIANT | /usr/bin/tr ' ' '_'`
		VARIANT_SUBDIR=`echo $VARIANT | /usr/bin/tr ' ' '/'`

		if [ $PRINT_INSTPATH -eq 1 ]; then
			echo $REZ_RELEASE_PACKAGES_PATH"/"$PKGNAME"/"$VER"/"$VARIANT_SUBDIR
			continue
		fi

		echo
		echo "---------------------------------------------------------"
		echo "rez-build: building for variant '"$VARIANT"'"
		echo "---------------------------------------------------------"
	fi

	mkdir -p $BUILD_DIR
	if [ "$VARIANT" != "" ] && [ ! -L $BUILD_DIR_SYMLINK ]; then
		ln -sf `basename $BUILD_DIR` $BUILD_DIR_SYMLINK
	fi

	SCR=$BUILD_DIR/build-env.sh
	BAKE=$BUILD_DIR/build-env.context
	ACTUAL_BAKE=$BUILD_DIR/build-env.actual
	DOTF=$BUILD_DIR/build-env.context.dot
	CHLOGF=$BUILD_DIR/changelog.txt
	METAFILE=$BUILD_DIR/info.txt

	# allow the svn pre-commit hook to identify the build directory as such
	touch $BUILD_DIR_ID

	# store build metadata
	echo "ACTUAL_BUILD_TIME: "$NOW_EPOCH > $METAFILE
	echo "BUILD_TIME: "$BUILD_EPOCH >> $METAFILE
	echo "USER: "$USER >> $METAFILE
	echo "SVN: "$SVNURL_METADATA >> $METAFILE

	# store the changelog into a metafile (rez-release will specify one
	# via the -c flag)
	if [ "$CHANGELOG" == "" ]; then
		if [ "$VCS" == "" ]; then
			echo 'not under version control' > $CHLOGF
		else
    		rez-$VCS-changelog > $CHLOGF
    	fi
	else
		cp $CHANGELOG $CHLOGF
	fi

	# attempt to resolve env for this variant
	echo
	echo "rez-build: invoking rez-config with args:"
	echo "$IGNORE_ARCHIVED_ARG $IGNORE_BLACKLISTED_ARG $ASSUME_DT_ARG --time=$BUILD_EPOCH"
	echo "requested packages: "$REQS $VARIANT
	echo "package search paths: "$REZ_PACKAGES_PATH

	# Note: we pull latest version of cmake into the env
	rez-config $IGNORE_ARCHIVED_ARG $IGNORE_BLACKLISTED_ARG --print-env --time=$BUILD_EPOCH $ASSUME_DT_ARG --dot-file=$DOTF $REQS $VARIANT cmake=l > $BAKE

	if [ $? -ne 0 ]; then
		rm -f $BAKE
		echo "rez-build failed - an environment failed to resolve." >&2
		exit 1
	fi

	# todo this shouldn't be a separate step
	# create dot-file
	# rez-config --print-dot --time=$BUILD_EPOCH $REQS $VARIANT > $DOTF

	echo "#!/bin/bash" > $SCR

	# because of how cmake works, you must cd into same dir as script to run it
	echo "if [ \"./build-env.sh\" != \""'$'"0\" ] ; then" >> $SCR
	echo "    echo you must cd into the same directory as this script to use it." >> $SCR
	echo "    exit 1" >> $SCR
	echo "fi" >> $SCR

	chmod 777 $SCR
	echo "source $BAKE" >> $SCR
	echo "export REZ_CONTEXT_FILE=$BAKE" >> $SCR
	echo "env > $ACTUAL_BAKE" >> $SCR

	# need to expose rez-config's cmake modules in build env
	if [ "$CMAKE_MODULE_PATH" == "" ]; then
		echo "export CMAKE_MODULE_PATH=$REZ_PATH/cmake" >> $SCR
	else
		echo "export CMAKE_MODULE_PATH=$REZ_PATH/cmake';'"'$CMAKE_MODULE_PATH' >> $SCR
	fi

	# make sure we can still use rez-config in the build env!
	echo 'export PATH=$PATH:'"$REZ_PATH/bin" >> $SCR

	echo "echo" >> $SCR
	echo "echo rez-build: in new env:" >> $SCR
	echo "rez-context-info" >> $SCR

	# set env-vars that CMakeLists.txt files can reference, in this way
	# we can drive the build from the package.yaml file
	echo "export REZ_BUILD_ENV=1" >> $SCR

	echo "export REZ_BUILD_PROJECT_VERSION="$VER >> $SCR
	echo "export REZ_BUILD_PROJECT_NAME="$PKGNAME >> $SCR

	if [ "$REQS" != "" ]; then
		echo "export REZ_BUILD_REQUIRES_UNVERSIONED='"`echo $REQS | sed 's/-[^ ]\+//g'`"'" >> $SCR
	fi

	if [ $VNUM -ne -1 ]; then
		echo "export REZ_BUILD_VARIANT='"$VARIANT"'" >> $SCR
		echo "export REZ_BUILD_VARIANT_UNVERSIONED='"`echo $VARIANT | sed 's/-[^ ]\+//g'`"'" >> $SCR
		echo "export REZ_BUILD_VARIANT_SUBDIR=/"$VARIANT_SUBDIR"/" >> $SCR
	fi

	# cmake invocation
	echo "echo" >> $SCR
	echo "echo rez-build: calling rez-cmake -d "$CMAKE_DIR_ARG" "$ARGS2 >> $SCR
	echo "rez-cmake -d "$CMAKE_DIR_ARG" "$ARGS2 >> $SCR
	echo "if [ "'$?'" -ne 0 ]; then exit 1 ; fi" >> $SCR

	if [ $DO_BUILD -eq 1 ]; then
		# todo determine build tool from rez-cmake args? For now just assume make

		if [ $NOCLEAN -ne 1 ]; then
			echo "echo" >> $SCR
			echo "echo rez-build: calling make clean" >> $SCR
			echo "make clean" >> $SCR
			echo "if [ "'$?'" -ne 0 ]; then exit 1 ; fi" >> $SCR
		fi

		echo "echo" >> $SCR
		echo "echo rez-build: calling make "$ARGS3 >> $SCR
		echo "make "$ARGS3 >> $SCR
		echo "if [ "'$?'" -ne 0 ]; then exit 1 ; fi" >> $SCR

		# run the build
		cd `dirname $SCR`
		./`basename $SCR`
		if [ $? -ne 0 ]; then
			echo "rez-build failed - there was a problem building." >&2
			exit 1
		fi
		cd -
	else
		echo 'export REZ_ENV_PROMPT=">$REZ_ENV_PROMPT"' >> $SCR
		echo "export REZ_ENV_PROMPT='BUILD>'" >> $SCR
		echo "/bin/bash --rcfile $REZ_PATH/bin/rez-env-bashrc" >> $SCR

		if [ $VNUM -eq -1 ]; then
			echo "Generated "$SCR", invoke to run cmake for this project."
		else
			echo "Generated "$SCR", invoke to run cmake for this project's variant:("$VARIANT")"
		fi
	fi
done


#    Copyright 2012 BlackGinger Pty Ltd (Cape Town, South Africa)
#
#    Copyright 2008-2012 Dr D Studios Pty Limited (ACN 127 184 954) (Dr. D Studios)
#
#    This file is part of Rez.
#
#    Rez is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Rez is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with Rez.  If not, see <http://www.gnu.org/licenses/>.
